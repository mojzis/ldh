<?php
/**
 * @file
 * Lazy developers helper module. Useful etensions for happy development.
 */

/**
 * Implements hook_menu().
 */
function ldh_menu() {

  $items['fields_json'] = array(
    'title' => 'Fields json',
    'page callback' => 'ldh_fields_json',
    'access arguments' => array('ldh fields'),
    'type' => MENU_CALLBACK,
    'file' => 'ldh.json.inc'
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function ldh_permission() {

  $items['ldh fields'] = array(
    'title' => t('Access fields json'),
  );
  return $items;
}

/**
 * Implements hook_form_ID_alter() for devel_execute_form().
 */
function ldh_form_devel_execute_form_alter(&$form, &$form_alter) {

  $form['ldhinfo'] = array(
    '#type' => 'fieldset',
    '#title' => 'LDH info',
    '#collapsible' => true,
    // todo: remember the last setting
    '#collapsed' => true,
    '#weight' => -1,
    '#attributes' => array('class' => array('ldh-functions')),
    );
  // todo : add javascript to enter the clicked function into the textarea
  // try to load this somehow automagically ?
  $functions = array(
    'ldh_pi' => array(
      'call' => 'ldh_pi($bundle, $entityType = "node");',
      'title' => 'Property information',
    ),
    'ldh_efq' => array(
      'call' => 'ldh_efq($bundle, $entityType = "node");',
      'title' => 'Entity field query'
    ),
    'ldh_nw' => array(
      'call' => 'ldh_nw($id);',
      'title' => 'Node wrapper',
    )
  );
  $form['ldhinfo']['functions'] = array(
    '#markup' =>  join("   \n",array_map(
      function ($el) {
        return '<a href="#" title="'. $el['title'] .'">'.$el['call'].'</a>';
      },
      $functions
      )),
    );
  $form['#attached']['js'] = array(
    drupal_get_path('module', 'ldh') . '/js/ldh_devel.js',
  );
}

/**
 * Create the LdhEfr class.
 * 
 * @param string $bundle
 *   bundle
 * 
 * @param $type
 * 
 * @return  \LdhEfr
 */
function ldh_efr($bundle, $type = null) {
  $efr = new LdhEfr($bundle, $type);
  return $efr;
}


function ldh_tefr($type) {
  $efr = new LdhEfrt($type);
  return $efr;
}


/**
 * Create an EntityFieldQuery.
 *
 * @param string $bundle
 * 
 * @param string $entityType
 *
 * @return \EntityFieldQuery
 */
function ldh_efq($bundle, $entityType = 'node'){
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', $entityType)
    ->entityCondition('bundle', $bundle);
  return $query;
}



/**
 * Render array container.
 * 
 * @ingroup render arrays helpers
 */
function ldh_container() {
  $out['#type'] = 'container';
}

/**
 * array for html tag
 */
function ldh_tagar($val, $tag = 'div') {
  $out = array();
  $out['#tag'] = $tag;
  $out['#type'] = 'html_tag';
  $out['#value'] = $val;
  return $out;
}

/**
 * function ldh_addclass
 */
function ldh_addclass(&$ar, $cl) {
  // check if the attributes are present
  // check if its an array
  // check if it contains classes ()
  // check if the parameter is an array
  $ar['#attributes']['class'][] = $cl;

}

function ldh_setid(&$ar, $id) {
  $ar['#attributes']['id'] = $id;
}

function ldh_setstyle(&$ar, $st) {
  $ar['#attributes']['style'] = $st;
}


/**
 * PropertyInfo
 * @todo
 * - combine with info from field_info_fields
 *   - especially ['FIELD_NAME']['field_name']
 * - deal with types that dont have bundle keys (ie user)
 */
function ldh_pi($bundle, $entityType = 'node') {
  $ei = entity_get_info($entityType);
  if (isset($ei['entity keys']['bundle']) && $ei['entity keys']['bundle']) {
    $bunkey = $ei['entity keys']['bundle'];
    $ent = entity_create($entityType, array($bunkey => $bundle));
    $nw = entity_metadata_wrapper($entityType, $ent);
    $pinfo = $nw->getPropertyInfo();
    return $pinfo;

  }
}

function ldh_taxo_addp($term, $vocname, $parent) {

}

/**
 * add a taxonomy term
 * @param string $term
 *   the title of the term to add
 * @param string $vocname
 *   the machine name of the vocabulary
 */
function ldh_taxo_add($word, $vocname, $parentid = 0) {
  // find vid
  $voc = taxonomy_vocabulary_machine_name_load($vocname);
  // create array
  // return tid
  $t = array(
    'vid' => $voc->vid,
    'name' => $word,
  );
  if ($parentid) {
    $t['parent'] = $parentid;
  }
  $term = (object) $t;
  taxonomy_term_save($term);
  return $term->tid;
}

/**
 * node wrapper
 *
 * @param integer $id
 * nid of the node to load
 *
 * @return EntityMetadataWrapper
 * http://drupalcontrib.org/api/drupal/contributions%21entity%21includes%21entity.wrapper.inc/class/EntityMetadataWrapper/7
 */
function ldh_nw($id) {
  $node = node_load($id);
  return entity_metadata_wrapper('node',$node);
}

function ldh_ew($id, $type) {
  $e = end(entity_load($type, array($id)));
  return entity_metadata_wrapper($type,$e);
}



function ldh_create($bundle, $entityType = 'node') {
  $ent = entity_create($entityType, array('type' => $bundle));
  $ew = entity_metadata_wrapper($entityType, $ent);
  return $ew;
}

function ldh_createe($bundle, $entityType = null) {
  $entityType = $entityType == null ? $bundle : $entityType;
  $ent = entity_create($entityType, array('type' => $bundle));
  //$ew = entity_metadata_wrapper($entityType, $ent);
  return $ent;
}


function ldh_mach_to_tid($mach, $voc, $field ) {
  // find automagically the field ?
  // cache the resulst ? or even the whole list ?
  $type = 'taxonomy_term';
  $q = ldh_efq($voc,$type);
  // find the column name, too :)
  $r = $q->fieldCondition($field, 'value', $mach)
    ->execute();
  if (isset($r[$type])) {
    return(end(array_keys($r[$type])));
  }
}

function ldh_load_one($type, $id) {
  $ents = entity_load($type,array($id));
  return end($ents);
}

function ldh_colname_field($fieldname) {
  $fi = field_info_field($fieldname);
  if (isset($fi['columns']) && $fi['columns']) {
    // first column found ...
    $col = reset(array_keys($fi['columns']));
    return $col;
  } else {
    return false;
  }
}


function ldh_create_type($name) {
  $type = new EntityType();
  $type->name = $name;
  $type->label = $name;
  $bundle = new Bundle();
  $bundle->entity_type = $name;
  $bundle->name = $name;
  $bundle->label = $name;
  $bundle->save();

  $type->addProperty('uid', 'Author', 'integer', 'author');
  $type->addProperty('created', 'Created', 'integer', 'created');
  $type->addProperty('changed', 'Changed', 'integer', 'changed');

  return $type;
}